{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"console.log('', )": {
		"prefix": "cl",
		"body": "console.log(${1:'$2', $3});"
	},

	"console.error('')": {
		"prefix": "ce",
		"body": "console.error($1);"
	},

	"import moduleName from 'module'": {
		"prefix": "imp",
		"body": "import ${2:moduleName} from '${1:module}';"
	},

	"const moduleName = require('module')": {
		"prefix": "req",
		"body": "const ${2:moduleName} = require('${1:module}');"
	},

	"const { moduleName } = require('module')": {
		"prefix": "reqd",
		"body": "const { ${2:moduleName} } = require('${1:module}');"
	},

	"import { destructuredModule } from 'module'": {
		"prefix": "imd",
		"body": "import { $2 } from '${1:module}';"
	},

	"() => {}": {
		"prefix": "fn",
		"body": "const ${1:name} = ${2:($3)} => $4"
	},

	"a() => {}": {
		"prefix": "af",
		"body": "(${1:el}) => ${2:r} "
	},

	"n() => {}": {
		"prefix": "nf",
		"body": "function ${1:name}(${2:param}) {\n\t${3:r}\n} "
	},

	"async () => {}": {
		"prefix": "afn",
		"body": "const ${1:name} = async ${2:($3)} => $4"
	},

	"const name = value": {
		"prefix": "c",
		"body": "const ${1:name} = ${2:value};"
	},

	"let name = value": {
		"prefix": "l",
		"body": "let ${1:name} = ${2:value};"
	},

	"const name =  { value }": {
		"prefix": "obj",
		"body": "const ${1:name} = {\n\t$2\n};"
	},

	"const name =  [ value, ]": {
		"prefix": "arr",
		"body": "const ${1:name} = [${2:value}];$"
	},

	"const { name } = value": {
		"prefix": "des",
		"body": "const { $2 } = $1;"
	},

	"const [name] = value": {
		"prefix": "desa",
		"body": "const [ $2 ] = $1;"
	},

	"export default": {
		"prefix": "ed",
		"body": "export default ${1:$TM_FILENAME_BASE};"
	},

	"module.exports = {}": {
		"prefix": "me",
		"body": "module.exports = {${1:$TM_FILENAME_BASE}};"
	},

	"describe": {
		"prefix": "desc",
		"body": ["describe('$1', () => {", "\t$0", "});", ""]
	},

	"testBlock": {
		"prefix": "test",
		"body": ["test('should $1', () => {", "\t$0", "});", ""]
	},

	"testAsyncBlock": {
		"prefix": "testa",
		"body": ["test('should $1', async () => {", "\t$0", "});", ""]
	},

	"itBlock": {
		"prefix": "it",
		"body": ["it('should $1', () => {", "\t$0", "})", ""]
	},

	"itAsyncBlock": {
		"prefix": "ita",
		"body": ["it('should $1', async () => {", "\t$0", "})", ""]
	},

	"import React from 'react'": {
		"prefix": "imr",
		"body": "import React from 'react';"
	},

	"import ReactDOM from 'react-dom'": {
		"prefix": "imrd",
		"body": "import React-DOM from 'react-dom';\n"
	},

	"fragment": {
		"prefix": "fm",
		"body": "<>\n\t${1:context}\n</>"
	},

	"tryCatch": {
		"prefix": "tr",
		"body": "try{\t\n\t${3:fn}\n} catch(e) {\t\n\tconsole.error(e.stack,''\'n[*] '+e.name,''\'n[*] '+e.message)\t${2:cat}\n};
	},

	"enter function": {
		"prefix": "ent",
		"body": ["console.log(`${0:$TM_FILENAME_BASE}`) \n\n$1"]
	},
	"ff function": {
		"prefix": "ff",
		"body": ["function ${TM_FILENAME_BASE}() {\n",
			"\t return (\n\t\t$1",
			"\t);\n",
			"};\n",
			"export { ${TM_FILENAME_BASE} }",
		]
	},

	"util function": {
		"prefix": "ut",
		"body": ["export const ${1:$TM_FILENAME_BASE} = () => {", "\t$0", "}"]
	}
}

